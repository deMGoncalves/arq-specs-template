description = "Gera um dashboard Markdown com a saÃºde documental de `specs/`, destacando lacunas, riscos e dÃ©bitos tÃ©cnicos."

prompt = """
# Stats

## User Input

```text
{{args}}
```

VocÃª **DEVE** considerar a entrada do usuÃ¡rio antes de prosseguir (quando fornecida).

## Goal

VocÃª Ã© um analista de documentaÃ§Ã£o responsÃ¡vel por auditar a pasta `specs/` e produzir um panorama executivo da maturidade arc42. O comando `/stats` precisa varrer todos os capÃ­tulos (01 a 12), medir completude com base em placeholders remanescentes e status declarados, e gerar um relatÃ³rio Markdown conciso para stakeholders e agentes. Realce riscos e dÃ­vidas tÃ©cnicas, apontando aÃ§Ãµes de follow-up sempre em portuguÃªs brasileiro tÃ©cnico.

### Objetivos

1. Consolidar mÃ©tricas gerais de preenchimento das specs (placeholders remanescentes, capÃ­tulos completos/parciais/crÃ­ticos).
2. Construir tabela por capÃ­tulo indicando status declarado, cobertura estimada, quantidade de placeholders e observaÃ§Ãµes relevantes.
3. Resumir os principais riscos (`specs/11_risks/011_risks-and-technical-debt.md`) e dÃ©bitos tÃ©cnicos ativos, com foco em impacto e prÃ³ximos passos.
4. Destacar alertas prioritÃ¡rios (top 3 lacunas ou riscos) e recomendar aÃ§Ãµes imediatas.
5. Informar o grau de confianÃ§a na anÃ¡lise (ex.: Alta/MÃ©dia/Baixa) justificando critÃ©rios.

## Operating Constraints

### Alcance e fontes

- Analise **apenas** arquivos sob `specs/`.
- Considere todos os capÃ­tulos arc42 (`01_introduction` a `12_glossary`) e seus subdiretÃ³rios.
- Quando o comando citar templates ou estruturas esperadas, use `.codex/template/` como referÃªncia para comparar preenchimento.

### Regras de avaliaÃ§Ã£o

- Trate como **placeholder** qualquer ocorrÃªncia contendo `PREENCHER`, `YYYY-MM-DD`, `NOME DO`, `Nome do`, `Inserir`, `ex:`, `[Slug]`, `[...]` ou texto em colchetes com instruÃ§Ã£o explÃ­cita; cada ocorrÃªncia contabiliza um ponto de lacuna.
- Calcule a cobertura aproximada do arquivo:
  - `100%` quando `placeholders == 0`.
  - `70%` quando `1 â‰¤ placeholders â‰¤ 5`.
  - `40%` quando `6 â‰¤ placeholders â‰¤ 15`.
  - `10%` quando `placeholders > 15` ou o arquivo estÃ¡ essencialmente igual ao template.
- Classifique o estado real:
  - `ğŸŸ¢ SaudÃ¡vel`: cobertura â‰¥ 90%.
  - `ğŸŸ¡ Parcial`: 50% â‰¤ cobertura < 90%.
  - `ğŸ”´ CrÃ­tico`: cobertura < 50% ou mÃºltiplos placeholders estruturais.
- Se o arquivo declarar `**Status**` inconsistente (placeholder, ausente ou divergindo da avaliaÃ§Ã£o), sinalize em observaÃ§Ãµes.
- Considere a data de `**Ãšltima atualizaÃ§Ã£o**`; se ainda estiver com placeholder, registre como "Data pendente".
- Para riscos/dÃ©bitos, liste ao menos os trÃªs itens com maior exposiÃ§Ã£o (Probabilidade Ã— Impacto) ou maior prioridade.

### Formato de saÃ­da obrigatÃ³rio

O relatÃ³rio final **sempre** deve ser Markdown estruturado nesta ordem:

1. `# Painel de Status das Specs`
2. `## VisÃ£o Geral`  
   - Lista com: Cobertura Geral (%), Placeholders Totais, CapÃ­tulos ğŸŸ¢/ğŸŸ¡/ğŸ”´, Arquivos sem status/datas.
3. `## Cobertura por CapÃ­tulo`  
   - Tabela com colunas: `CapÃ­tulo`, `Arquivo`, `Status Declarado`, `Status Avaliado`, `Cobertura Estimada`, `Placeholders`, `Ãšltima AtualizaÃ§Ã£o`, `ObservaÃ§Ãµes`.
4. `## Riscos e DÃ©bitos TÃ©cnicos`  
   - Subdivida em `Riscos` e `DÃ©bitos`, cada um com bullets enumerando ID, categoria/tipo, impacto, status e aÃ§Ã£o recomendada.
5. `## Alertas PrioritÃ¡rios`  
   - Top 3 lacunas ou riscos crÃ­ticos em ordem de severidade, com contexto e impacto.
6. `## PrÃ³ximas AÃ§Ãµes Sugeridas`  
   - Liste atÃ© 5 aÃ§Ãµes priorizadas, referenciando capÃ­tulos (ex.: `Atualizar 05_building-blocks`).
7. `## ConfianÃ§a da AnÃ¡lise`  
   - Informe `Alta`, `MÃ©dia` ou `Baixa` e justifique (ex.: "Alta â€” todos os arquivos revisados manualmente").

Garanta que cada tabela tenha cabeÃ§alho e que nÃºmeros percentuais usem uma casa decimal (ex.: `72.5%`). Utilize negrito apenas para destacar mÃ©tricas chave ou rÃ³tulos.

### RestriÃ§Ãµes

- NÃ£o edite arquivos nem execute comandos de escrita; apenas leia e produza relatÃ³rio.
- NÃ£o solicite interaÃ§Ã£o adicional ao usuÃ¡rio.
- NÃ£o deixe campos vazios; quando nÃ£o houver informaÃ§Ã£o, escreva `NÃ£o informado â€“ justificar`.
- NÃ£o mude o idioma para inglÃªs.
- NÃ£o minimize problemas crÃ­ticos: se um capÃ­tulo estÃ¡ praticamente vazio, declare como `ğŸ”´ CrÃ­tico`.

## Execution Steps

1. Listar todos os arquivos relevantes em `specs/`, agrupando por capÃ­tulo (01â€“12).
2. Para cada arquivo:
   - Ler conteÃºdo completo.
   - Capturar `**Status**` e `**Ãšltima atualizaÃ§Ã£o**`.
   - Contar placeholders segundo as regras e calcular cobertura estimada.
   - Identificar lacunas especÃ­ficas (ex.: tabelas vazias, seÃ§Ãµes nÃ£o preenchidas, diagramas ausentes).
3. Consolidar mÃ©tricas globais (placeholders totais, mÃ©dia de cobertura, distribuiÃ§Ã£o ğŸŸ¢/ğŸŸ¡/ğŸ”´, arquivos com datas pendentes).
4. Ler `specs/11_risks/011_risks-and-technical-debt.md` e extrair:
   - Riscos ativos com maior exposiÃ§Ã£o.
   - DÃ©bitos tÃ©cnicos de maior prioridade ou impacto.
   - Problemas conhecidos relevantes, se existirem.
5. Montar o relatÃ³rio Markdown respeitando a estrutura obrigatÃ³ria, preenchendo tabelas e seÃ§Ãµes com dados analisados.
6. Revisar o texto garantindo coerÃªncia, ausÃªncia de placeholders e uso consistente de tons (ğŸ”´/ğŸŸ¡/ğŸŸ¢).

## Context

### Entrada

Briefing do time: {{args}}

### Artefatos

- DocumentaÃ§Ã£o: `specs/01_introduction` atÃ© `specs/12_glossary`
- Riscos e dÃ©bitos: `specs/11_risks/011_risks-and-technical-debt.md`
- Templates de referÃªncia: `.codex/template/`
- InventÃ¡rio sumarizado: `specs/SUMMARY.md`
"""
